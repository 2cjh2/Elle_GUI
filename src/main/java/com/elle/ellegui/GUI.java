/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.elle.ellegui;

import com.elle.ellegui.presentation.filter.CreateDocumentFilter;
import com.elle.ellegui.presentation.filter.ITableFilter;
import com.elle.ellegui.presentation.filter.TableRowFilterSupport;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.AbstractDocument;
import java.awt.*;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Louis W.
 */
public class GUI extends javax.swing.JFrame {
    /**
     * Variables to remember each combination of main windows filter
     *
     */
    private CreateTables.MyTableModel_TradesDefault myTableModel_trades;
    private CreateTables.MyTableModel_PositionDefault myTableModel_position;
    private static ITableFilter filterBySymbol;
    private static ITableFilter filterByDate;
//    private String selectedSymbol;
    private int column_index_symbol;
    private int column_index_date;
    private String dateEnd;
    private String dateInit;

    /**
     * Creates new form GUI2
     */
    public GUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Elle GUI");
        setDefaultCloseOperation(GUI.EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jBPositions = new javax.swing.JButton();
        jBTrades = new javax.swing.JButton();
        jBAllocations = new javax.swing.JButton();
        jBMatches = new javax.swing.JButton();
        jBIB = new javax.swing.JButton();
        jBTL = new javax.swing.JButton();
        numOfRecords = new javax.swing.JLabel();
        jCSymbol = new javax.swing.JCheckBox();
        jCDateRange = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jTSymbol = new javax.swing.JTextField();
        jTStartDate = new javax.swing.JTextField();
        jTEndDate = new javax.swing.JTextField();
        clearAllFilters = new java.awt.Button();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jText = new javax.swing.JTextArea();
        jEnter = new javax.swing.JButton();
        jClear = new javax.swing.JButton();
        jPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMFile = new javax.swing.JMenu();
        jMFileConnections = new javax.swing.JMenu();
        jMFileConnLocal = new javax.swing.JMenuItem();
        jMFileConnAWS = new javax.swing.JMenuItem();
        jMFileConnDummy = new javax.swing.JMenuItem();
        jMFileRead = new javax.swing.JMenuItem();
        jMFilePrint = new javax.swing.JMenu();
        jMFilePrintGUI = new javax.swing.JMenuItem();
        jMFilePrintWindow = new javax.swing.JMenuItem();
        jMFileSave = new javax.swing.JMenuItem();
        jMVersion = new javax.swing.JMenuItem();
        jMEdit = new javax.swing.JMenu();
        jMEditConnection = new javax.swing.JMenuItem();
        jMFind = new javax.swing.JMenu();
        jMReports = new javax.swing.JMenu();
        jMTools = new javax.swing.JMenu();
        jMToolsReconcile = new javax.swing.JMenuItem();
        jMLoad = new javax.swing.JMenu();
        jMLoadFile = new javax.swing.JMenuItem();
        jMView = new javax.swing.JMenu();
        jMViewLog = new javax.swing.JMenuItem();
        jMViewSql = new javax.swing.JMenuItem();
        jMViewTrades = new javax.swing.JMenuItem();
        jMViewPositions = new javax.swing.JMenuItem();
        jMViewIB = new javax.swing.JMenuItem();
        jMViewTL = new javax.swing.JMenuItem();
        jMViewLoadsTable = new javax.swing.JMenuItem();
        jMHelp = new javax.swing.JMenu();
        jMOther = new javax.swing.JMenu();
        jMConnect = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBPositions.setIcon(new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/button1.png")); // NOI18N
        jBPositions.setText("Positions");
        jBPositions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBPositions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPositionsActionPerformed(evt);
            }
        });

        jBTrades.setIcon(new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/button1.png")); // NOI18N
        jBTrades.setText("Trades");
        jBTrades.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBTrades.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBTrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTradesActionPerformed(evt);
            }
        });

        jBAllocations.setIcon(new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/button3.png")); // NOI18N
        jBAllocations.setText("Allocations");
        jBAllocations.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBAllocations.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBAllocations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAllocationsActionPerformed(evt);
            }
        });

        jBMatches.setIcon(new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/button3.png")); // NOI18N
        jBMatches.setText("Show Matches");
        jBMatches.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBMatches.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBMatchesActionPerformed(evt);
            }
        });

        jBIB.setIcon(new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/button1.png")); // NOI18N
        jBIB.setText("IB_8949");
        jBIB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBIB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBIB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBIBActionPerformed(evt);
            }
        });

        jBTL.setIcon(new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/button1.png")); // NOI18N
        jBTL.setText("TL_8949");
        jBTL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBTL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTLActionPerformed(evt);
            }
        });

        numOfRecords.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        numOfRecords.setText("Number of Records: 0");

        jCSymbol.setText("Symbol");
        jCSymbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCSymbolActionPerformed(evt);
            }
        });

        jCDateRange.setText("Date Range");
        jCDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCDateRangeActionPerformed(evt);
            }
        });

        jLabel1.setText("-");

        clearAllFilters.setActionCommand("Clear All Filters");
        clearAllFilters.setLabel("Clear All Filters");
        clearAllFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBPositions)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBTrades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(numOfRecords)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBAllocations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBMatches)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBIB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBTL)
                .addGap(77, 77, 77)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(clearAllFilters, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jCDateRange)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBTrades)
                            .addComponent(jBAllocations)
                            .addComponent(jBMatches)
                            .addComponent(jBIB)
                            .addComponent(jBTL)
                            .addComponent(jBPositions))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTSymbol, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jCSymbol))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jCDateRange)
                                .addGap(3, 3, 3)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(numOfRecords))
                    .addComponent(clearAllFilters, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jBPositions.getAccessibleContext().setAccessibleDescription("");

        jScrollPane4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jText.setBackground(new java.awt.Color(153, 255, 204));
        jText.setColumns(20);
        jText.setRows(5);
        jText.setText("Please input an SQL statement:\n>>");
        jText.setText("Please input an SQL statement:\n>>");
        ((AbstractDocument) jText.getDocument())
        .setDocumentFilter(new CreateDocumentFilter(33));
        jScrollPane4.setViewportView(jText);

        jEnter.setText("Enter");
        jEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEnterActionPerformed(evt);
            }
        });

        jClear.setText("Clear");
        jClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(455, 455, 455)
                .addComponent(jEnter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(426, 426, 426))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jEnter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 419, Short.MAX_VALUE)
        );

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jMenuBar1.setSize(new java.awt.Dimension(840, 10));

        jMFile.setText("File");

        jMFileConnections.setText("Select Connections");

        jMFileConnLocal.setText("Local");
        jMFileConnLocal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFileConnLocalActionPerformed(evt);
            }
        });
        jMFileConnections.add(jMFileConnLocal);

        jMFileConnAWS.setText("AWS");
        jMFileConnAWS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFileConnAWSActionPerformed(evt);
            }
        });
        jMFileConnections.add(jMFileConnAWS);

        jMFileConnDummy.setText("Dummy");
        jMFileConnDummy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFileConnDummyActionPerformed(evt);
            }
        });
        jMFileConnections.add(jMFileConnDummy);

        jMFile.add(jMFileConnections);

        jMFileRead.setText("Read from Text File");
        jMFileRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFileReadActionPerformed(evt);
            }
        });
        jMFile.add(jMFileRead);

        jMFilePrint.setText("Print");

        jMFilePrintGUI.setText("Print GUI");
        jMFilePrintGUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFilePrintGUIActionPerformed(evt);
            }
        });
        jMFilePrint.add(jMFilePrintGUI);

        jMFilePrintWindow.setText("Print Display Window");
        jMFilePrintWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFilePrintWindowActionPerformed(evt);
            }
        });
        jMFilePrint.add(jMFilePrintWindow);

        jMFile.add(jMFilePrint);

        jMFileSave.setText("Save File");
        jMFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMFileSaveActionPerformed(evt);
            }
        });
        jMFile.add(jMFileSave);

        jMVersion.setText("Version");
        jMVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMVersionActionPerformed(evt);
            }
        });
        jMFile.add(jMVersion);

        jMenuBar1.add(jMFile);

        jMEdit.setText("Edit");

        jMEditConnection.setText("Connection...");
        jMEditConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMEditConnectionActionPerformed(evt);
            }
        });
        jMEdit.add(jMEditConnection);

        jMenuBar1.add(jMEdit);

        jMFind.setText("Find");
        jMenuBar1.add(jMFind);

        jMReports.setText("Reports");
        jMenuBar1.add(jMReports);

        jMTools.setText("Tools");

        jMToolsReconcile.setText("Reconcile 8949s");
        jMToolsReconcile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMToolsReconcileActionPerformed(evt);
            }
        });
        jMTools.add(jMToolsReconcile);

        jMenuBar1.add(jMTools);

        jMLoad.setText("Load");

        jMLoadFile.setText("Load File...");
        jMLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMLoadFileActionPerformed(evt);
            }
        });
        jMLoad.add(jMLoadFile);

        jMenuBar1.add(jMLoad);

        jMView.setText("View");

        jMViewLog.setText("Log");
        jMViewLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewLogActionPerformed(evt);
            }
        });
        jMView.add(jMViewLog);

        jMViewSql.setText("SQL Command");
        jMViewSql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewSqlActionPerformed(evt);
            }
        });
        jMView.add(jMViewSql);

        jMViewTrades.setText("Display Trades-All Fields");
        jMViewTrades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewTradesActionPerformed(evt);
            }
        });
        jMView.add(jMViewTrades);

        jMViewPositions.setText("Display Positions-All Fields");
        jMViewPositions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewPositionsActionPerformed(evt);
            }
        });
        jMView.add(jMViewPositions);

        jMViewIB.setText("Display IB_8949-All Fields");
        jMViewIB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewIBActionPerformed(evt);
            }
        });
        jMView.add(jMViewIB);

        jMViewTL.setText("Display TL_8949-All Fields");
        jMViewTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewTLActionPerformed(evt);
            }
        });
        jMView.add(jMViewTL);

        jMViewLoadsTable.setText("Display Loads Table");
        jMViewLoadsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMViewLoadsTableActionPerformed(evt);
            }
        });
        jMView.add(jMViewLoadsTable);

        jMenuBar1.add(jMView);

        jMHelp.setText("Help");
        jMenuBar1.add(jMHelp);

        jMOther.setText("Other");
        jMenuBar1.add(jMOther);

        jMConnect.setText("?");
        jMConnect.setToolTipText("");
        jMenuBar1.add(Box.createHorizontalGlue());
        jMenuBar1.add(jMConnect);
        jMConnect.setIcon(iconConnection);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel.getAccessibleContext().setAccessibleParent(jPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMFileConnDummyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFileConnDummyActionPerformed
        if (dummy.checkInfo()) {
            registerServer(dummy);
        } else {
            new LoginWindow();
            jMConnect.setText("Dummy");
        }
    }//GEN-LAST:event_jMFileConnDummyActionPerformed

    private void jMFileConnLocalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFileConnLocalActionPerformed
        if (local.checkInfo()) {
            registerServer(local);
        } else {
            new LoginWindow();
            jMConnect.setText("Local");

        }
    }//GEN-LAST:event_jMFileConnLocalActionPerformed

    private void jMFileConnAWSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFileConnAWSActionPerformed
        if (aws.checkInfo()) {
            registerServer(aws);
        } else {
            new LoginWindow();
            jMConnect.setText("AWS");

        }
    }//GEN-LAST:event_jMFileConnAWSActionPerformed

    private void jMFileReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFileReadActionPerformed
        textFile = showTable(textFile, "ShowTextFile");
        doNotHighlightButtons();
    }//GEN-LAST:event_jMFileReadActionPerformed

    private void jMFilePrintGUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFilePrintGUIActionPerformed
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintWindow(this));
        boolean ok = job.printDialog();
        if (ok) {
            try {
                logWindow.sendMessages("Start to print the GUI...");
                job.print();
                logWindow.sendMessages(job.getJobName()
                        + " is sucessfully printed!\n");
            } catch (PrinterException ex) {
                logWindow.sendMessages(ex.getMessage() + "\n");
            }
        }
    }//GEN-LAST:event_jMFilePrintGUIActionPerformed

    private void jMFilePrintWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFilePrintWindowActionPerformed
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setPrintable(new PrintWindow(createTable));
        boolean ok = job.printDialog();
        if (ok) {
            try {
                job.pageDialog(job.defaultPage());
                logWindow
                        .sendMessages("Start to print the display window...");
                job.print();
                logWindow.sendMessages(job.getJobName()
                        + " is successfully printed!\n");
            } catch (PrinterException ex) {
                logWindow.sendMessages(ex.getMessage() + "\n");
            }
        }
    }//GEN-LAST:event_jMFilePrintWindowActionPerformed

    private void jMViewTradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewTradesActionPerformed
        allTrades = showTable(allTrades, "ShowAllTrades");
    }//GEN-LAST:event_jMViewTradesActionPerformed

    private void jMLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMLoadFileActionPerformed
        try {
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jMLoadFileActionPerformed

    private void jMViewLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewLogActionPerformed
        logWindow.showLogWindow();
    }//GEN-LAST:event_jMViewLogActionPerformed

    private void jMViewPositionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewPositionsActionPerformed
        allPositions = showTable(allPositions, "ShowAllPositions");
    }//GEN-LAST:event_jMViewPositionsActionPerformed

    private void jMViewIBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewIBActionPerformed
        allIB_8949 = showTable(allIB_8949, "ShowAllIB_8949");
    }//GEN-LAST:event_jMViewIBActionPerformed

    private void jMViewTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewTLActionPerformed
        allTL_8949 = showTable(allTL_8949, "ShowAllTL_8949");
    }//GEN-LAST:event_jMViewTLActionPerformed

    private void jMViewLoadsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewLoadsTableActionPerformed
        loadsTable = showTable(loadsTable, "ShowLoadsTable");
    }//GEN-LAST:event_jMViewLoadsTableActionPerformed

    private void jMViewSqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMViewSqlActionPerformed


    }//GEN-LAST:event_jMViewSqlActionPerformed

    private void jMEditConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMEditConnectionActionPerformed
//        new LoginWindow2().setVisible(true);
    }//GEN-LAST:event_jMEditConnectionActionPerformed

    private void jMToolsReconcileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMToolsReconcileActionPerformed
        reconcile = showTable(reconcile, "Reconcile");
    }//GEN-LAST:event_jMToolsReconcileActionPerformed


    /**
     * Filter by Symbol same popup filter used in Main window
     */
    private void filterBySymbol(String selectedSymbol) {
        jCSymbol.setSelected(true);
        jCSymbol.setEnabled(true);
        filterBySymbol = TableRowFilterSupport.forTable(createTable.table).actions(true).applyFilter();
        filterBySymbol.applyFilterBySymbol(column_index_symbol, selectedSymbol, filterBySymbol);
        monitorTableChange(column_index_symbol - 1);
        showNumberOfRecords(filterBySymbol.getTable().getRowCount());
        if(createTable.getTableNum()==7){
                myTableModel_position.setFilterBySymbol(filterBySymbol);
        } else if(createTable.getTableNum()==2){
                 myTableModel_trades.setFilterBySymbol(filterBySymbol);
        }

    }

    /**
     * //Filter by Date with same popup filter used in Main window
     */
    private void filterByDate() {
        jCDateRange.setSelected(true);
        jCDateRange.setEnabled(true);
        filterByDate = TableRowFilterSupport.forTable(createTable.table).actions(true).applyFilter();

        filterByDate.applyFilterByDate(createTable.table.getColumnCount() - 1, dateInit, dateEnd, filterByDate);
        monitorTableChange(column_index_date - 1);
        showNumberOfRecords(filterByDate.getTable().getRowCount());
        if(createTable.getTableNum()==7){
            myTableModel_position.setFilterByDate(filterByDate);
        } else if(createTable.getTableNum()==2){
            myTableModel_trades.setFilterByDate(filterByDate);
        }

    }

    private void jEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEnterActionPerformed
        logWindow.sendMessages("SQL Command processing...\n"
                + enterButton.getCommand(jText));
        if (enterButton.isCreateTable(jText)) {
            try {
                showTable(enterButton.getCommand(jText));
                logWindow.sendMessages("Execution complete!\n");
                enterButton.adjustText(jText);
            } catch (Exception ex) {
                logWindow.sendMessages(ex.getMessage() + "\n");
            }
        } else {
            ExecuteSQLStatement.updateDatabase(conn,
                    enterButton.getCommand(jText));
        }
    }//GEN-LAST:event_jEnterActionPerformed

    private void jClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearActionPerformed
        ((AbstractDocument) jText.getDocument())
                .setDocumentFilter(new CreateDocumentFilter(0));
        jText.setText("Please input an SQL statement:\n>>");
        ((AbstractDocument) jText.getDocument())
                .setDocumentFilter(new CreateDocumentFilter(33));
    }//GEN-LAST:event_jClearActionPerformed

    private void jMFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMFileSaveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save File As");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            logWindow.sendMessages("Save file as: "
                    + fileToSave.getAbsolutePath() + "\n");
        }
    }//GEN-LAST:event_jMFileSaveActionPerformed

    private void jMVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMVersionActionPerformed
        JOptionPane.showMessageDialog(this, "Creation Date: "
                + "2015-07-03" + "\n"
                + "Version: " + "0.6.8a");
    }//GEN-LAST:event_jMVersionActionPerformed

    private void clearAllFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllFiltersActionPerformed
        clearAllFilterButton();
    }//GEN-LAST:event_clearAllFiltersActionPerformed

    /**
     * Clear all filter from main window search boxes. In both case ONLY set selected false each checkbox.
     * clearAllFilter is execute with "clear All Filter" button.
     */

    private void clearAllFilterButton() {
        if (createTable.getTableNum()==7) {   //position Table
            if(filterByDate!=null){
                myTableModel_position.getFilterByDate().clear();
            }
            if(filterBySymbol !=null){
               myTableModel_position.getFilterBySymbol().clear();
            }
            myTableModel_position.setCheckBoxSymbol(false);
            myTableModel_position.setCheckBoxDateRange(false);

        }
        if (createTable.getTableNum()==2){
            if(filterByDate!=null){
                myTableModel_trades.getFilterByDate().clear();
            }
            if(filterBySymbol !=null){
                myTableModel_trades.getFilterBySymbol().clear();
            }
            myTableModel_trades.setCheckBoxSymbol(false);
            myTableModel_trades.setCheckBoxDateRange(false);
        }
            jCDateRange.setSelected(false);
            jCSymbol.setSelected(false);
            GUI.monitorTableChange(-1);
            showNumberOfRecords(createTable.table.getRowCount());
    }

    /**
     * Method that execute in a check box for Date range.
     * it takes myTableModel for each table to set and get the parameters.
     * @param evt
     */
    private void jCDateRangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCDateRangeActionPerformed
        String selectedSymbol = "";
        dateInit = jTStartDate.getText();
        dateEnd = jTEndDate.getText();

        if(dateCheckingFormat(dateInit,dateEnd)){
            if((createTable.getTableNum()==7)){
                myTableModel_position.setDateInit(dateInit);
                myTableModel_position.setDateEnd(dateEnd);
                myTableModel_position.setCheckBoxDateRange(jCDateRange.isSelected());
                selectedSymbol= myTableModel_position.getSelectedSymbol();

            } else if ((createTable.getTableNum()==2 )){
                myTableModel_trades.setDateInit(dateInit);
                myTableModel_trades.setDateEnd(dateEnd);
                myTableModel_trades.setCheckBoxDateRange(jCDateRange.isSelected());
                selectedSymbol= myTableModel_trades.getSelectedSymbol();
            }
            int column = createTable.table.getModel().getColumnCount();
            getColumnIndexTime();
            getColumnIndexSymbol();

            if (jCDateRange.isSelected() && !jCSymbol.isSelected()) {
                filterByDate();
            } else if (jCDateRange.isSelected() && jCSymbol.isSelected()) {
                filterBySymbol.applyFilterByDate(column-2, dateInit, dateEnd, filterBySymbol);    //column-2 because filter use the last column data to apply filter
                monitorTableChange(column_index_date - 1);
            } else if (!jCDateRange.isSelected() && jCSymbol.isSelected()) {
                filterBySymbol(selectedSymbol);
                monitorTableChange(column_index_symbol - 1);
            } else {

                if(createTable.getTableNum()==7){
                    myTableModel_position.getFilterByDate().clear();
                    myTableModel_position.setDateEnd(null);
                    myTableModel_position.setDateInit(null);
                    myTableModel_position.setCheckBoxDateRange(false);

                } else if (createTable.getTableNum()==2){
                    myTableModel_trades.getFilterByDate().clear();
                    myTableModel_trades.setDateEnd(null);
                    myTableModel_trades.setDateInit(null);
                    myTableModel_trades.setCheckBoxDateRange(false);
                }
                monitorTableChange(-1);
                showNumberOfRecords(createTable.table.getRowCount());
            }
        }
            else{
              JOptionPane.showMessageDialog(this,"Date value or format may be wrong  e.g: 2001-03-11 - 2012-04-11");
              jCDateRange.setSelected(false);
              if(createTable.getTableNum()==7){
                positions = showTable(positions, "ShowDV_Positions");
              }else{
                  trades = showTable(trades, "ShowDV_Trades");
              }

            }
    }//GEN-LAST:event_jCDateRangeActionPerformed

    /**
     * Method to check date format and values before to do filterByDate.
     * @param dateInit
     * @param dateEnd
     */
    private boolean dateCheckingFormat(String dateInit, String dateEnd)  {
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
        Date date_init= null;
        Date date_End = null;
        int numOfRow = createTable.getTable().getRowCount();
        int column_index_date= getColumnIndexTime();
        if(dateInit.equals("")){
           dateInit= createTable.getTable().getValueAt(0,column_index_date-1).toString();
        }
        if(dateEnd.equals("")){
            dateEnd = createTable.getTable().getValueAt(numOfRow-1,column_index_date-1).toString();
        }
        try{

                date_init= format.parse(dateInit);
                date_End = format.parse(dateEnd);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this,"Date Format is wrong e.g: 2011-03-11");
            e.printStackTrace();
        }
        if(date_End.before(date_init)){
            return false;
        } else{
            return true;
        }
    }

    private int getColumnIndexSymbol() {
        int column = createTable.table.getColumnCount();
        for (int i = 0; i < column; i++) {
            if (createTable.table.getModel().getColumnName(i).matches("Symbol")) {   // select first column with *Time title
                column_index_symbol = i;
                break;
            }

        }
        return column_index_symbol;
    }

    private int getColumnIndexTime() {
        int column = createTable.table.getColumnCount();
        for (int i = 0; i < column; i++) {
            if (createTable.table.getModel().getColumnName(i).matches(".*Time.*")) {   // select first column with *Time title
                column_index_date = i;
                break;
            }

        }
        return column_index_date;
    }

    private void jCSymbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCSymbolActionPerformed
        String selectedSymbol= jTSymbol.getText();
        if((createTable.getTableNum()==7)){
            myTableModel_position.setSelectedSymbol(selectedSymbol);
            myTableModel_position.setCheckBoxSymbol(jCSymbol.isSelected());

        } else if ((createTable.getTableNum()==2 )){
            myTableModel_trades.setSelectedSymbol(selectedSymbol);
            myTableModel_trades.setCheckBoxSymbol(jCSymbol.isSelected());
        }

        int column = createTable.table.getColumnModel().getColumnCount();
        getColumnIndexTime();
        getColumnIndexSymbol();

        if (jCSymbol.isSelected() && !jCDateRange.isSelected()) {
            filterBySymbol(selectedSymbol);
        } else if (jCSymbol.isSelected() && jCDateRange.isSelected()) {
            filterByDate.applyFilterBySymbol(column_index_symbol, selectedSymbol, filterByDate);
            monitorTableChange(column_index_symbol - 1);
        } else if (!jCSymbol.isSelected() && jCDateRange.isSelected()) {
            filterByDate();
            monitorTableChange(column_index_date - 1);
        } else {

            if(createTable.getTableNum()==7){
                myTableModel_position.getFilterBySymbol().clear();
                myTableModel_position.setCheckBoxSymbol(false);

            } else if (createTable.getTableNum()==2){
                myTableModel_trades.getFilterBySymbol().clear();
                myTableModel_trades.setSelectedSymbol(jTSymbol.getText());
                myTableModel_trades.setCheckBoxSymbol(jCSymbol.isSelected());
            }

             monitorTableChange(-1);
             showNumberOfRecords(createTable.table.getRowCount());
        }
    }//GEN-LAST:event_jCSymbolActionPerformed

    private void jBTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTLActionPerformed
        TL_8949 = showTable(TL_8949, "ShowDV_TL_8949");
        doNotHighlightButtons();
        jBTL.setBackground(Color.RED);
    }//GEN-LAST:event_jBTLActionPerformed

    private void jBIBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBIBActionPerformed
        IB_8949 = showTable(IB_8949, "ShowDV_IB_8949");
        doNotHighlightButtons();
        jBIB.setBackground(Color.RED);
    }//GEN-LAST:event_jBIBActionPerformed

    private void jBMatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBMatchesActionPerformed
        showTable();
        doNotHighlightButtons();
        jBMatches.setBackground(Color.RED);
    }//GEN-LAST:event_jBMatchesActionPerformed

    private void jBAllocationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAllocationsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBAllocationsActionPerformed

    private void jBTradesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTradesActionPerformed
        trades = showTable(trades, "ShowDV_Trades");
        if(myTableModel_trades ==null){
             myTableModel_trades =createTable.new MyTableModel_TradesDefault(conn);
        }
        boolean checkBoxSymbolTrades = myTableModel_trades.isCheckBoxSymbol();
        String selectedSymbolTrades = myTableModel_trades.getSelectedSymbol();
        boolean checkBoxDateTrades = myTableModel_trades.isCheckBoxDateRange();

        if (checkBoxSymbolTrades && checkBoxDateTrades) {
            jTSymbol.setText(selectedSymbolTrades);
            jCSymbol.setSelected(true);
            jTStartDate.setText(myTableModel_trades.getDateInit());
            jTEndDate.setText(myTableModel_trades.getDateEnd());
            jCDateRange.setSelected(true);
        } else if(checkBoxSymbolTrades && !checkBoxDateTrades) {
            jTSymbol.setText(selectedSymbolTrades);
            jCSymbol.setSelected(true);
            jTStartDate.setText(null);
            jTEndDate.setText(null);
            jCDateRange.setSelected(false);

        } else if (!checkBoxSymbolTrades && checkBoxDateTrades){
            jTSymbol.setText(null);
            jCSymbol.setSelected(false);
            jTStartDate.setText(myTableModel_trades.getDateInit());
            jTEndDate.setText(myTableModel_trades.getDateEnd());
            jCDateRange.setSelected(true);
        }
        else {
            jTSymbol.setText(selectedSymbolTrades);
            jCSymbol.setSelected(false);
            jTStartDate.setText(myTableModel_trades.getDateInit());
            jTEndDate.setText(myTableModel_trades.getDateEnd());
            jCDateRange.setSelected(false);
        }

        doNotHighlightButtons();
        jBTrades.setBackground(Color.RED);
       

    }//GEN-LAST:event_jBTradesActionPerformed

    private void jBPositionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPositionsActionPerformed
        positions = showTable(positions, "ShowDV_Positions");
        if(myTableModel_position==null){
            myTableModel_position= createTable.new MyTableModel_PositionDefault(conn);
        }
          boolean checkBoxSymbolPosition = myTableModel_position.isCheckBoxSymbol();
          boolean checkBoxDatePosition = myTableModel_position.isCheckBoxDateRange();
          String symbol = myTableModel_position.getSelectedSymbol();
        if (checkBoxSymbolPosition && checkBoxDatePosition) {
            jTSymbol.setText(symbol);
            jCSymbol.setSelected(true);
            jTStartDate.setText(myTableModel_position.getDateInit());
            jTEndDate.setText(myTableModel_position.getDateEnd());
            jCDateRange.setSelected(true);
        } else if(checkBoxSymbolPosition && !checkBoxDatePosition) {
            jTSymbol.setText(symbol);
            jCSymbol.setSelected(true);
            jTStartDate.setText(null);
            jTEndDate.setText(null);
            jCDateRange.setSelected(false);

        } else if (!checkBoxSymbolPosition && checkBoxDatePosition){
            jTSymbol.setText(null);
            jCSymbol.setSelected(false);

            jTStartDate.setText(myTableModel_position.getDateInit());
            jTEndDate.setText(myTableModel_position.getDateEnd());
            jCDateRange.setSelected(true);
        } else {
            jTSymbol.setText(symbol);
            jCSymbol.setSelected(false);
            jTStartDate.setText(myTableModel_position.getDateInit());
            jTEndDate.setText(myTableModel_position.getDateEnd());
            jCDateRange.setSelected(false);
        }

        doNotHighlightButtons();
        jBPositions.setBackground(Color.RED);

    }//GEN-LAST:event_jBPositionsActionPerformed
    private void showTable(String showTable) {
        try {
            jPanel.remove(scrollPane);
            jPanel.repaint();
        } catch (Exception ex) {
            logWindow.sendMessages(ex.getMessage() + "\n");
        }
        logWindow.sendMessages("Reading from MySQL...");
        createTable = new CreateTables(showTable, conn);
        scrollPane = new JScrollPane(createTable.table);
        jPanel.setLayout(new BorderLayout());
        jPanel.add(scrollPane, BorderLayout.CENTER);
        int numOfRow = createTable.table.getRowCount();

        logWindow.sendMessages("Read successfully!\n");
        jPanel.revalidate();
    }

    private CreateTables showTable(CreateTables table, String str) {    // parameters passed by value
        int numOfRow = 0;
        try {
            jPanel.remove(scrollPane);
            jPanel.repaint();
        } catch (Exception ex) {
            logWindow.sendMessages(ex.getMessage() + "\n");
        }

        if (table == null || !table.getTableStatus()) { // create a new createTable
            logWindow.sendMessages("Reading from MySQL...");
            try {
                table = new CreateTables(str, conn);
                if (status == false) {
                    JOptionPane.showMessageDialog(this, "Fail to load chosen table.");
                    status = true;
                    doNotHighlightButtons();
                    return table;
                }

                GUI.createTable = table;
                scrollPane = new JScrollPane(table.table);
                logWindow.sendMessages("Read successfully!\n");

                numOfRow = table.table.getRowCount();
                table.setTable(table.table);
            } catch (Exception e) {
                doNotHighlightButtons();
                JOptionPane.showMessageDialog(this, "Please log in");
            }
        } else {
            createTable = table;
            scrollPane = new JScrollPane(table.getTable());
            numOfRow = table.getTable().getRowCount();
        }
        jPanel.setLayout(new BorderLayout());
        jPanel.add(scrollPane, BorderLayout.CENTER);
        numOfRecords
                .setText("<html><center><font size = 5>Number of Records<br><center><font size = 6>"
                        + numOfRow + "</html>");
        jPanel.revalidate();

        return table;
    }

    private void showTable(JTable table) {
        try {
            jPanel.remove(scrollPane);
            jPanel.repaint();
        } catch (Exception ex) {
            logWindow.sendMessages(ex.getMessage() + "\n");
        }

        scrollPane = new JScrollPane(table);
        jPanel.setLayout(new BorderLayout());
        jPanel.add(scrollPane, BorderLayout.CENTER);
        int numOfRow = table.getRowCount();
        numOfRecords
                .setText("<html><center><font size = 5>Number of Records<br><center><font size = 6>"
                        + numOfRow + "</html>");
    }

    private void showTable() {
        try {
            jPanel.remove(scrollPane);
            jPanel.repaint();
        } catch (Exception ex) {
            logWindow.sendMessages(ex.getMessage() + "\n");
        }
        logWindow.sendMessages("Reading from MySQL...");
        createTable = new CreateTables(conn);
        scrollPane = new JScrollPane(createTable.table);
        jPanel.setLayout(new BorderLayout());
        jPanel.add(scrollPane, BorderLayout.CENTER);
        int numOfRow = createTable.table.getRowCount();
        numOfRecords
                .setText("<html><center><font size = 5>Number of Records<br><center><font size = 6>"
                        + numOfRow + "</html>");
        logWindow.sendMessages("Read successfully!\n");
    }

    private void showNumberOfRecords(int numOfRow){
        numOfRecords
                .setText("<html><center><font size = 5>Number of Records<br><center><font size = 6>"
                        + numOfRow + "</html>");
    }

    public void registerServer(LoginInfo info) {
        try {
            logWindow.sendMessages("Start to connect...");

            conn = DriverManager.getConnection(info.getURL(), info.getUsername(), info.getPassword());

            logWindow.sendMessages("Connect successfully!\n");

            ImageIcon image = new ImageIcon(info.getIconAddress());
            info.checkInfo();   // change status if connection built up
        } catch (SQLException ex) {
            logWindow.sendMessages(ex.getMessage());
            logWindow.sendMessages(ex.getSQLState() + "\n");
        } catch (Exception ex) {
            logWindow.sendMessages(ex.getMessage() + "\n");
        }

    }

    public static void monitorTableChange(int columnIndex) {
        int numOfRow = createTable.table.getRowCount();

        JViewport view = new JViewport();
        JTable jt = new CreateTables(numOfRow).table;   // download data each time???
        view.setView(jt);
        view.setPreferredSize(jt.getPreferredSize());
        createTable.scrollPane.setRowHeader(view);
        if (columnIndex != -1) {
            DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
            cellRenderer.setBackground(Color.GREEN);
            cellRenderer.setHorizontalAlignment(JLabel.CENTER);

            createTable.table.getColumnModel().getColumn(columnIndex)
                    .setHeaderRenderer(cellRenderer);

            createTable.setFilteredTable(createTable.table);
            createTable.setFilteringStatus(true);
        } else {
            for (int i = 0; i < createTable.table.getColumnCount() - 1; i++) {
                createTable.table.getColumnModel().getColumn(i)
                        .setHeaderRenderer(new HeaderRenderer(createTable.table));
            }
            createTable.setFilteringStatus(false);
        }
    }

    public void installSaveFile() {

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save File As");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            logWindow.sendMessages("Save file as: "
                    + fileToSave.getAbsolutePath() + "\n");
        }
    }

    public void doNotHighlightButtons() {
        jBTrades.setBackground(null);
        jBPositions.setBackground(null);
        jBIB.setBackground(null);
        jBTL.setBackground(null);
        jBAllocations.setBackground(null);
        jBMatches.setBackground(null);
    }

    public GridBagConstraints setConstraintsOfFilters(GridBagConstraints c) {
        c.fill = GridBagConstraints.BOTH;
        c.weightx = 0.5;
        c.gridx = 2;
        c.gridy = 0;
        c.ipady = 30;
        c.ipadx = 400;
        return c;
    }

    public ImageIcon setButtonIconOfFilters() {
        String str = "Images/filter.png";
        ImageIcon icon = new ImageIcon(str);
        Image image = icon.getImage().getScaledInstance(28, 28,
                Image.SCALE_SMOOTH);
        icon = new ImageIcon(image);
        return icon;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
               new GUI().setVisible(true);

            }
        });
    }

    protected static CreateTables createTable;    // record the current createTable
    protected static Connection conn;
    protected static Statement stmt;
    public static boolean status = true;    // false: something wrong happens and unable to load createTable

    private final LogWindow logWindow = new LogWindow();
    public static LoginInfo aws = new LoginInfo("AWS"); // static variables are common to all objects of the class
    public static LoginInfo local = new LoginInfo("Local");
    public static LoginInfo dummy = new LoginInfo("Dummy");
    public static LoginInfo tempInfo = new LoginInfo();    // used for communicating with loginWindow
    private final EnterButton enterButton = new EnterButton();
    private final Icon iconConnection = new javax.swing.ImageIcon("/Users/danielabecker/Dropbox/ELLE Prog 2015/ELLE GUI/ElleGUI/src/main/java/com/elle/ellegui/images/imag_11.png");
    private JScrollPane scrollPane;

    public static CreateTables positions, trades, IB_8949, TL_8949,
            allPositions, allTrades, allIB_8949, allTL_8949,
            loadsTable, textFile, reconcile;
    public JTable tablefilte;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button clearAllFilters;
    private javax.swing.JButton jBAllocations;
    private javax.swing.JButton jBIB;
    private javax.swing.JButton jBMatches;
    private javax.swing.JButton jBPositions;
    private javax.swing.JButton jBTL;
    private javax.swing.JButton jBTrades;
    private javax.swing.JCheckBox jCDateRange;
    private javax.swing.JCheckBox jCSymbol;
    private javax.swing.JButton jClear;
    private javax.swing.JButton jEnter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMConnect;
    private javax.swing.JMenu jMEdit;
    private javax.swing.JMenuItem jMEditConnection;
    private javax.swing.JMenu jMFile;
    private javax.swing.JMenuItem jMFileConnAWS;
    private javax.swing.JMenuItem jMFileConnDummy;
    private javax.swing.JMenuItem jMFileConnLocal;
    private javax.swing.JMenu jMFileConnections;
    private javax.swing.JMenu jMFilePrint;
    private javax.swing.JMenuItem jMFilePrintGUI;
    private javax.swing.JMenuItem jMFilePrintWindow;
    private javax.swing.JMenuItem jMFileRead;
    private javax.swing.JMenuItem jMFileSave;
    private javax.swing.JMenu jMFind;
    private javax.swing.JMenu jMHelp;
    private javax.swing.JMenu jMLoad;
    private javax.swing.JMenuItem jMLoadFile;
    private javax.swing.JMenu jMOther;
    private javax.swing.JMenu jMReports;
    private javax.swing.JMenu jMTools;
    private javax.swing.JMenuItem jMToolsReconcile;
    private javax.swing.JMenuItem jMVersion;
    private javax.swing.JMenu jMView;
    private javax.swing.JMenuItem jMViewIB;
    private javax.swing.JMenuItem jMViewLoadsTable;
    private javax.swing.JMenuItem jMViewLog;
    private javax.swing.JMenuItem jMViewPositions;
    private javax.swing.JMenuItem jMViewSql;
    private javax.swing.JMenuItem jMViewTL;
    private javax.swing.JMenuItem jMViewTrades;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTEndDate;
    private javax.swing.JTextField jTStartDate;
    private javax.swing.JTextField jTSymbol;
    private javax.swing.JTextArea jText;
    private javax.swing.JLabel numOfRecords;
    // End of variables declaration//GEN-END:variables
}
